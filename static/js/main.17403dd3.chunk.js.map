{"version":3,"sources":["AppContext.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["ReducerActions","initialState","isUsersLoaded","selectedUser","userPosts","selectedPost","isUserPostsLoading","isUserPostsError","postComments","isPostsCommentsLoading","isPostsCommentsError","isWriteComment","reducerFn","state","action","type","payload","setIsUsersLoaded","setSelectedUser","id","setIsUserPostsLoading","setIsUserPostsError","setUserPosts","setSelectedPost","setIsPostsCommentsLoading","setIsPostsCommentsError","setPostComments","setIsWriteComment","DispatchContext","React","createContext","StateContext","StateProvider","children","useReducer","dispatch","Provider","value","PostsList","useContext","className","map","post","title","classNames","onClick","handelSetSelectedPost","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","json","Error","client","initialNewComment","name","email","comment","isNameEmpty","isEmailEmpty","isCommentEmpty","isAddingNewComment","NewCommentForm","postId","useState","newComment","setNewComment","handelChange","key","isKeyEmpty","charAt","toUpperCase","slice","prevState","postCommentToApi","a","res","catch","finally","onSubmit","event","preventDefault","length","handelAddComment","htmlFor","placeholder","onChange","target","PostDetails","getPostDetailsFromApi","useEffect","href","filter","postComment","users","push","UserSelector","isListVisiable","setIsListVisiable","btnText","onBlur","role","user","onMouseDown","App","getUserPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.17403dd3.chunk.js","sourcesContent":["import React, { ReactNode, Reducer, useReducer } from 'react';\nimport { Post } from './types/Post';\nimport { User } from './types/User';\nimport { Comment } from './types/Comment';\n\nexport enum ReducerActions {\n  setIsUsersLoaded = 'setIsUsersLoaded',\n  setSelectedUser = 'setSelectedUser',\n  setUserPosts = 'setUserPosts',\n  setSelectedPost = 'setSelectedPost',\n  setIsUserPostsLoading = 'setIsUserPostsLoading',\n  setIsUserPostsError = 'setIsUserPostsError',\n  setPostComments = 'setPostComments',\n  setIsPostsCommentsLoading = 'setIsPostsCommentsLoading',\n  setIsPostsCommentsError = 'setIsPostsCommentsError',\n  setIsWriteComment = 'setIsWriteComment',\n}\n\ntype Props = {\n  children: ReactNode;\n};\n\ntype DispatchContextType = (action: DispatchActions) => void;\n\ninterface State {\n  isUsersLoaded: boolean;\n  selectedUser: User | null;\n  userPosts: Post[] | null;\n  selectedPost: Post | null;\n  isUserPostsLoading: boolean;\n  isUserPostsError: boolean;\n  postComments: Comment[] | null;\n  isPostsCommentsLoading: boolean;\n  isPostsCommentsError: boolean;\n  isWriteComment: boolean;\n}\nconst initialState: State = {\n  isUsersLoaded: false,\n  selectedUser: null,\n  userPosts: null,\n  selectedPost: null,\n  isUserPostsLoading: false,\n  isUserPostsError: false,\n  postComments: null,\n  isPostsCommentsLoading: false,\n  isPostsCommentsError: false,\n  isWriteComment: false,\n};\n\ninterface DispatchActions {\n  type: ReducerActions,\n  // eslint-disable-next-line\n  payload: any,\n}\n\nconst reducerFn: Reducer<State, DispatchActions> = (state, action) => {\n  const { type, payload } = action;\n\n  switch (type) {\n    case ReducerActions.setIsUsersLoaded:\n      return {\n        ...state,\n        isUsersLoaded: payload,\n      };\n\n    case ReducerActions.setSelectedUser:\n      if (state.selectedUser?.id === payload.id) {\n        return {\n          ...state,\n        };\n      }\n\n      return {\n        ...state,\n        selectedUser: payload,\n        isUserPostsLoading: false,\n        isUserPostsError: false,\n        selectedPost: null,\n        postComments: null,\n      };\n\n      break;\n\n    case ReducerActions.setIsUserPostsLoading:\n      return {\n        ...state,\n        isUserPostsLoading: payload,\n      };\n\n    case ReducerActions.setIsUserPostsError:\n      return {\n        ...state,\n        isUserPostsError: payload,\n      };\n\n    case ReducerActions.setUserPosts:\n      return {\n        ...state,\n        userPosts: payload,\n        isUserPostsLoading: false,\n      };\n\n    case ReducerActions.setSelectedPost:\n      return {\n        ...state,\n        selectedPost: payload,\n      };\n\n    case ReducerActions.setIsPostsCommentsLoading:\n      return {\n        ...state,\n        isPostsCommentsLoading: payload,\n      };\n\n    case ReducerActions.setIsPostsCommentsError:\n      return {\n        ...state,\n        isPostsCommentsError: payload,\n      };\n\n    case ReducerActions.setPostComments:\n      return {\n        ...state,\n        postComments: payload,\n      };\n\n    case ReducerActions.setIsWriteComment:\n      return {\n        ...state,\n        isWriteComment: payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const DispatchContext = React.createContext<\nDispatchContextType\n>(() => {});\n\nexport const StateContext = React.createContext(initialState);\n\nexport const StateProvider: React.FC<Props> = ({ children }) => {\n  const [state, dispatch] = useReducer(reducerFn, initialState);\n\n  return (\n    <DispatchContext.Provider value={dispatch}>\n      <StateContext.Provider value={state}>\n        {children}\n      </StateContext.Provider>\n    </DispatchContext.Provider>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useContext } from 'react';\nimport { DispatchContext, ReducerActions, StateContext } from '../AppContext';\nimport { Post } from '../types/Post';\n\nexport const PostsList: React.FC = () => {\n  const dispatch = useContext(DispatchContext);\n  const { userPosts, selectedPost } = useContext(StateContext);\n\n  const handelSetSelectedPost = (post: Post) => {\n    if (selectedPost?.id === post.id) {\n      dispatch({\n        type: ReducerActions.setSelectedPost,\n        payload: null,\n      });\n\n      dispatch({\n        type: ReducerActions.setIsWriteComment,\n        payload: false,\n      });\n    } else {\n      dispatch({\n        type: ReducerActions.setSelectedPost,\n        payload: post,\n      });\n\n      dispatch({\n        type: ReducerActions.setIsWriteComment,\n        payload: false,\n      });\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {userPosts && userPosts.map(post => (\n            <tr key={post.id} data-cy=\"Post\">\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames('button is-link', {\n                    'is-light': selectedPost?.id !== post.id,\n                  })}\n                  onClick={() => handelSetSelectedPost(post)}\n                >\n                  {selectedPost?.id === post.id ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  // eslint-disable-next-line\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  // eslint-disable-next-line\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  // eslint-disable-next-line\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useContext, useState } from 'react';\nimport classNames from 'classnames';\nimport { client } from '../utils/fetchClient';\nimport { DispatchContext, ReducerActions, StateContext } from '../AppContext';\nimport { Comment } from '../types/Comment';\n\ninterface NewComment {\n  name: string;\n  email: string;\n  comment: string;\n  isNameEmpty: boolean;\n  isEmailEmpty: boolean;\n  isCommentEmpty: boolean;\n  isAddingNewComment: boolean;\n}\n\nconst initialNewComment = {\n  name: '',\n  email: '',\n  comment: '',\n  isNameEmpty: false,\n  isEmailEmpty: false,\n  isCommentEmpty: false,\n  isAddingNewComment: false,\n};\n\nexport const NewCommentForm: React.FC = () => {\n  const dispatch = useContext(DispatchContext);\n  const { selectedPost, postComments } = useContext(StateContext);\n  const postId = selectedPost?.id || 0;\n\n  const [newComment, setNewComment] = useState<NewComment>(initialNewComment);\n\n  const handelChange = (value: string, key: string) => {\n    const isKeyEmpty = `is${key.charAt(0).toUpperCase()}${key.slice(1)}Empty`;\n\n    setNewComment(prevState => ({\n      ...prevState,\n      [key]: value,\n      [isKeyEmpty]: false,\n    }));\n  };\n\n  const postCommentToApi = async () => {\n    setNewComment(prevState => ({\n      ...prevState,\n      isAddingNewComment: true,\n    }));\n\n    await client.post<Comment>(`/comments?postId=${postId}`, {\n      postId,\n      name: newComment.name,\n      email: newComment.email,\n      body: newComment.comment,\n    })\n      .then(res => {\n        if (postComments && res.postId) {\n          dispatch({\n            type: ReducerActions.setPostComments,\n            payload: [...postComments, res],\n          });\n        }\n      })\n      .catch(() => {})\n      .finally(() => {\n        setNewComment(prevState => ({\n          ...prevState,\n          comment: '',\n          isAddingNewComment: false,\n        }));\n      });\n  };\n\n  const handelAddComment = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const { name, email, comment } = newComment;\n\n    if (!name || !email || !comment) {\n      setNewComment(prevState => ({\n        ...prevState,\n        isNameEmpty: prevState.name.length === 0,\n        isEmailEmpty: prevState.email.length === 0,\n        isCommentEmpty: prevState.comment.length === 0,\n      }));\n    } else {\n      postCommentToApi();\n    }\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={(event) => handelAddComment(event)}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input',\n              { 'is-danger': newComment.isNameEmpty })}\n            value={newComment.name}\n            onChange={(event) => handelChange(event.target.value, 'name')}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {newComment.isNameEmpty && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {newComment.isNameEmpty && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input',\n              { 'is-danger': newComment.isEmailEmpty })}\n            value={newComment.email}\n            onChange={(event) => handelChange(event.target.value, 'email')}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {newComment.isEmailEmpty && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {newComment.isEmailEmpty && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea',\n              { 'is-danger': newComment.isCommentEmpty })}\n            value={newComment.comment}\n            onChange={(event) => handelChange(event.target.value, 'comment')}\n          />\n        </div>\n\n        {newComment.isCommentEmpty && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link',\n              { 'is-loading': newComment.isAddingNewComment })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={() => setNewComment(initialNewComment)}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useContext, useEffect } from 'react';\nimport { Comment } from '../types/Comment';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { client } from '../utils/fetchClient';\nimport { DispatchContext, ReducerActions, StateContext } from '../AppContext';\n\nexport const PostDetails: React.FC = () => {\n  const dispatch = useContext(DispatchContext);\n\n  const {\n    selectedPost: post,\n    postComments,\n    isPostsCommentsLoading,\n    isPostsCommentsError,\n    isWriteComment,\n  } = useContext(StateContext);\n\n  const getPostDetailsFromApi = async () => {\n    if (post) {\n      dispatch({\n        type: ReducerActions.setIsPostsCommentsLoading,\n        payload: true,\n      });\n\n      await client.get<Comment[]>(`/comments?postId=${post.id}`)\n        .then(res => {\n          dispatch({\n            type: ReducerActions.setPostComments,\n            payload: res,\n          });\n        })\n        .catch(() => dispatch({\n          type: ReducerActions.setIsPostsCommentsError,\n          payload: true,\n        }))\n        .finally(() => dispatch({\n          type: ReducerActions.setIsPostsCommentsLoading,\n          payload: false,\n        }));\n    }\n  };\n\n  useEffect(() => {\n    getPostDetailsFromApi();\n  }, [post]);\n\n  const handelDeletePost = (id: number) => {\n    client.delete(`/comments/${id}`);\n\n    dispatch({\n      type: ReducerActions.setPostComments,\n      payload: postComments?.filter(postComment => postComment.id !== id),\n    });\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isPostsCommentsLoading && <Loader />}\n\n          {!isPostsCommentsLoading && isPostsCommentsError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!isPostsCommentsLoading && !isPostsCommentsError\n          && postComments?.length === 0 && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!isPostsCommentsLoading && postComments?.length !== 0 && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n              {postComments?.map(comment => (\n                <article\n                  key={comment.id}\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handelDeletePost(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {!isPostsCommentsLoading && !isPostsCommentsError\n          && !isWriteComment && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => dispatch({\n                type: ReducerActions.setIsWriteComment,\n                payload: true,\n              })}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isWriteComment\n          && (\n            <NewCommentForm />\n          )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useContext, useState } from 'react';\nimport { DispatchContext, ReducerActions, StateContext } from '../AppContext';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nconst users: User[] = [];\n\nclient.get<User[]>('/users').then(res => users.push(...res));\n\nexport const UserSelector: React.FC = () => {\n  const { selectedUser } = useContext(StateContext);\n  const dispatch = useContext(DispatchContext);\n\n  const [isListVisiable, setIsListVisiable] = useState(false);\n  const btnText = selectedUser?.name || 'Choose a user';\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown',\n        { 'is-active': isListVisiable })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsListVisiable(!isListVisiable)}\n          onBlur={() => setIsListVisiable(false)}\n        >\n          <span>{btnText}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n      {isListVisiable && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users && users.map(user => (\n              <a\n                key={user.id}\n                href={`#user-${user.id}`}\n                className={classNames('dropdown-item', {\n                  'is-active': user.id === selectedUser?.id,\n                })}\n                onMouseDown={(event: React.MouseEvent) => {\n                  event.preventDefault();\n                  dispatch({\n                    type: ReducerActions.setSelectedUser,\n                    payload: user,\n                  });\n                  setIsListVisiable(false);\n                }}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useContext, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { DispatchContext, ReducerActions, StateContext } from './AppContext';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\nimport { Post } from './types/Post';\nimport { client } from './utils/fetchClient';\n\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nexport const App: React.FC = () => {\n  const dispatch = useContext(DispatchContext);\n\n  const {\n    selectedUser,\n    userPosts,\n    selectedPost,\n    isUserPostsLoading,\n    isUserPostsError,\n  } = useContext(StateContext);\n\n  const getUserPosts = async () => {\n    if (selectedUser) {\n      dispatch({\n        type: ReducerActions.setIsUserPostsLoading,\n        payload: true,\n      });\n\n      await client.get<Post[]>(`/posts?userId=${selectedUser.id}`)\n        .then(res => {\n          dispatch({\n            type: ReducerActions.setUserPosts,\n            payload: res,\n          });\n        })\n        .catch(() => dispatch({\n          type: ReducerActions.setIsUserPostsError,\n          payload: true,\n        }))\n        .finally(() => dispatch({\n          type: ReducerActions.setIsUserPostsLoading,\n          payload: false,\n        }));\n    }\n  };\n\n  useEffect(() => {\n    getUserPosts();\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {selectedUser === null && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isUserPostsLoading && <Loader />}\n\n                {isUserPostsError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {!isUserPostsLoading && !isUserPostsError && selectedUser\n                && userPosts?.length === 0 && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {!isUserPostsLoading && !isUserPostsError && selectedUser\n                && userPosts?.length !== 0 && (\n                  <PostsList />\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* {selectedPost && ( */}\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && <PostDetails />}\n            </div>\n          </div>\n          {/* )} */}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport { StateProvider } from './AppContext';\n\nReactDOM.render(\n  <StateProvider>\n    <App />\n  </StateProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}